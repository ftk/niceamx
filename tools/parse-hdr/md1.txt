pawn::marh_t<int, int, float, float, float, float, float, float> attach_object_to_vehicle_t("AttachObjectToVehicle", marhs); // native AttachObjectToVehicle(objectid, vehicleid, Float:OffsetX, Float:OffsetY, Float:OffsetZ, Float:RotX, Float:RotY, Float:RotZ);
pawn::marh_t<int, int, float, float, float, float, float, float, int> attach_object_to_object_t("AttachObjectToObject", marhs); // native AttachObjectToObject(objectid, attachtoid, Float:OffsetX, Float:OffsetY, Float:OffsetZ, Float:RotX, Float:RotY, Float:RotZ, SyncRotation = 1);
pawn::marh_t<int, int, float, float, float, float, float, float> attach_object_to_player_t("AttachObjectToPlayer", marhs); // native AttachObjectToPlayer(objectid, playerid, Float:OffsetX, Float:OffsetY, Float:OffsetZ, Float:RotX, Float:RotY, Float:RotZ);
pawn::marh_t<int, float, float, float, float, float, float, float> move_object_t("MoveObject", marhs); // native MoveObject(objectid, Float:X, Float:Y, Float:Z, Float:Speed, Float:RotX = -1000.0, Float:RotY = -1000.0, Float:RotZ = -1000.0);
pawn::marh_t<int> is_object_moving_t("IsObjectMoving", marhs); // native IsObjectMoving(objectid);
pawn::marh_t<int, int> edit_object_t("EditObject", marhs); // native EditObject(playerid, objectid);
pawn::marh_t<int, int> edit_player_object_t("EditPlayerObject", marhs); // native EditPlayerObject(playerid, objectid);
pawn::marh_t<int> select_object_t("SelectObject", marhs); // native SelectObject(playerid);
pawn::marh_t<int> cancel_edit_t("CancelEdit", marhs); // native CancelEdit(playerid);
pawn::marh_t<int, int, int, float, float, float, float, float, float> attach_player_object_to_vehicle_t("AttachPlayerObjectToVehicle", marhs); // native AttachPlayerObjectToVehicle(playerid, objectid, vehicleid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:RotZ);
pawn::marh_t<int, int, float, float, float, float, float, float, float> move_player_object_t("MovePlayerObject", marhs); // native MovePlayerObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:Speed, Float:RotX = -1000.0, Float:RotY = -1000.0, Float:RotZ = -1000.0);
pawn::marh_t<int, int> is_player_object_moving_t("IsPlayerObjectMoving", marhs); // native IsPlayerObjectMoving(playerid, objectid);
pawn::marh_t<int, int, int, string, string, int> set_object_material_t("SetObjectMaterial", marhs); // native SetObjectMaterial(objectid, materialindex, modelid, txdname[], texturename[], materialcolor=0);
pawn::marh_t<int, int, int, int, string, string, int> set_player_object_material_t("SetPlayerObjectMaterial", marhs); // native SetPlayerObjectMaterial(playerid, objectid, materialindex, modelid, txdname[], texturename[], materialcolor=0);
pawn::marh_t<int, string, int, int, string, int, int, int, int, int> set_object_material_text_t("SetObjectMaterialText", marhs); // native SetObjectMaterialText(objectid, text[], materialindex = 0, materialsize = OBJECT_MATERIAL_SIZE_256x128, fontface[] = "Arial", fontsize = 24, bold = 1, fontcolor = 0xFFFFFFFF, backcolor = 0, textalignment = 0);
pawn::marh_t<int, int, string, int, int, string, int, int, int, int, int> set_player_object_material_text_t("SetPlayerObjectMaterialText", marhs); // native SetPlayerObjectMaterialText(playerid, objectid, text[], materialindex = 0, materialsize = OBJECT_MATERIAL_SIZE_256x128, fontface[] = "Arial", fontsize = 24, bold = 1, fontcolor = 0xFFFFFFFF, backcolor = 0, textalignment = 0);/*  SA-MP Player Functions
pawn::marh_t<int, float, float, float> get_player_distance_from_point_t("GetPlayerDistanceFromPoint", marhs); // native Float:GetPlayerDistanceFromPoint(playerid, Float:X, Float:Y, Float:Z);
pawn::marh_t<int> get_player_target_player_t("GetPlayerTargetPlayer", marhs); // native GetPlayerTargetPlayer(playerid);
pawn::marh_t<int, string, float, float, float, float, int> play_audio_stream_for_player_t("PlayAudioStreamForPlayer", marhs); // native PlayAudioStreamForPlayer(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0);
pawn::marh_t<int> stop_audio_stream_for_player_t("StopAudioStreamForPlayer", marhs); // native StopAudioStreamForPlayer(playerid);
pawn::marh_t<int> get_player_surfing_object_i_d_t("GetPlayerSurfingObjectID", marhs); // native GetPlayerSurfingObjectID(playerid);
pawn::marh_t<int, int, float, float, float, float> remove_building_for_player_t("RemoveBuildingForPlayer", marhs); // native RemoveBuildingForPlayer(playerid, modelid, Float:fX, Float:fY, Float:fZ, Float:fRadius);
pawn::marh_t<int, int, int, int, float, float, float, float, float, float, float, float, float, int, int> set_player_attached_object_t("SetPlayerAttachedObject", marhs); // native SetPlayerAttachedObject(playerid, index, modelid, bone, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 1.0, Float:fScaleY = 1.0, Float:fScaleZ = 1.0, materialcolor1 = 0, materialcolor2 = 0);
pawn::marh_t<int, int> remove_player_attached_object_t("RemovePlayerAttachedObject", marhs); // native RemovePlayerAttachedObject(playerid, index);
pawn::marh_t<int, int> is_player_attached_object_slot_used_t("IsPlayerAttachedObjectSlotUsed", marhs); // native IsPlayerAttachedObjectSlotUsed(playerid, index);
pawn::marh_t<int, int> edit_attached_object_t("EditAttachedObject", marhs); // native EditAttachedObject(playerid, index);
pawn::marh_t<int, float, float, string> create_player_text_draw_t("CreatePlayerTextDraw", marhs); // native PlayerText:CreatePlayerTextDraw(playerid, Float:x, Float:y, text[]);
pawn::marh_t<int, playertext> player_text_draw_destroy_t("PlayerTextDrawDestroy", marhs); // native PlayerTextDrawDestroy(playerid, PlayerText:text);
pawn::marh_t<int, playertext, float, float> player_text_draw_letter_size_t("PlayerTextDrawLetterSize", marhs); // native PlayerTextDrawLetterSize(playerid, PlayerText:text, Float:x, Float:y);
pawn::marh_t<int, playertext, float, float> player_text_draw_text_size_t("PlayerTextDrawTextSize", marhs); // native PlayerTextDrawTextSize(playerid, PlayerText:text, Float:x, Float:y);
pawn::marh_t<int, playertext, int> player_text_draw_alignment_t("PlayerTextDrawAlignment", marhs); // native PlayerTextDrawAlignment(playerid, PlayerText:text, alignment);
pawn::marh_t<int, playertext, int> player_text_draw_color_t("PlayerTextDrawColor", marhs); // native PlayerTextDrawColor(playerid, PlayerText:text, color);
pawn::marh_t<int, playertext, int> player_text_draw_use_box_t("PlayerTextDrawUseBox", marhs); // native PlayerTextDrawUseBox(playerid, PlayerText:text, use);
pawn::marh_t<int, playertext, int> player_text_draw_box_color_t("PlayerTextDrawBoxColor", marhs); // native PlayerTextDrawBoxColor(playerid, PlayerText:text, color);
pawn::marh_t<int, playertext, int> player_text_draw_set_shadow_t("PlayerTextDrawSetShadow", marhs); // native PlayerTextDrawSetShadow(playerid, PlayerText:text, size);
pawn::marh_t<int, playertext, int> player_text_draw_set_outline_t("PlayerTextDrawSetOutline", marhs); // native PlayerTextDrawSetOutline(playerid, PlayerText:text, size);
pawn::marh_t<int, playertext, int> player_text_draw_background_color_t("PlayerTextDrawBackgroundColor", marhs); // native PlayerTextDrawBackgroundColor(playerid, PlayerText:text, color);
pawn::marh_t<int, playertext, int> player_text_draw_font_t("PlayerTextDrawFont", marhs); // native PlayerTextDrawFont(playerid, PlayerText:text, font);
pawn::marh_t<int, playertext, int> player_text_draw_set_proportional_t("PlayerTextDrawSetProportional", marhs); // native PlayerTextDrawSetProportional(playerid, PlayerText:text, set);
pawn::marh_t<int, playertext, int> player_text_draw_set_selectable_t("PlayerTextDrawSetSelectable", marhs); // native PlayerTextDrawSetSelectable(playerid, PlayerText:text, set);
pawn::marh_t<int, playertext> player_text_draw_show_t("PlayerTextDrawShow", marhs); // native PlayerTextDrawShow(playerid, PlayerText:text);
pawn::marh_t<int, playertext> player_text_draw_hide_t("PlayerTextDrawHide", marhs); // native PlayerTextDrawHide(playerid, PlayerText:text);
pawn::marh_t<int, playertext, string> player_text_draw_set_string_t("PlayerTextDrawSetString", marhs); // native PlayerTextDrawSetString(playerid, PlayerText:text, string[]);
pawn::marh_t<int, int, float, float, float, int, int, int> set_player_map_icon_t("SetPlayerMapIcon", marhs); // native SetPlayerMapIcon(playerid, iconid, Float:x, Float:y, Float:z, markertype, color, style = MAPICON_LOCAL);
pawn::marh_t<int, float, float, float, int> set_player_camera_look_at_t("SetPlayerCameraLookAt", marhs); // native SetPlayerCameraLookAt(playerid, Float:x, Float:y, Float:z, cut = CAMERA_CUT);
pawn::marh_t<int> get_player_camera_mode_t("GetPlayerCameraMode", marhs); // native GetPlayerCameraMode(playerid);
pawn::marh_t<int, int> attach_camera_to_object_t("AttachCameraToObject", marhs); // native AttachCameraToObject(playerid, objectid);
pawn::marh_t<int, int> attach_camera_to_player_object_t("AttachCameraToPlayerObject", marhs); // native AttachCameraToPlayerObject(playerid, playerobjectid);
pawn::marh_t<int, float, float, float, float, float, float, int, int> interpolate_camera_pos_t("InterpolateCameraPos", marhs); // native InterpolateCameraPos(playerid, Float:FromX, Float:FromY, Float:FromZ, Float:ToX, Float:ToY, Float:ToZ, time, cut = CAMERA_CUT);
pawn::marh_t<int, float, float, float, float, float, float, int, int> interpolate_camera_look_at_t("InterpolateCameraLookAt", marhs); // native InterpolateCameraLookAt(playerid, Float:FromX, Float:FromY, Float:FromZ, Float:ToX, Float:ToY, Float:ToZ, time, cut = CAMERA_CUT);
pawn::marh_t<int> stop_recording_player_data_t("StopRecordingPlayerData", marhs); // native StopRecordingPlayerData(playerid);
pawn::marh_t<int, int> select_text_draw_t("SelectTextDraw", marhs); // native SelectTextDraw(playerid, hovercolor); // enables the mouse so the player can select a textdraw
pawn::marh_t<int> cancel_select_text_draw_t("CancelSelectTextDraw", marhs); // native CancelSelectTextDraw(playerid);	// cancel textdraw selection with the mouse /*  SA-MP Native SQLite Database Functions
pawn::marh_t<int, string, int> get_player_network_stats_t("GetPlayerNetworkStats", marhs); // native GetPlayerNetworkStats(playerid, retstr[], retstr_size);
pawn::marh_t<string, int> get_network_stats_t("GetNetworkStats", marhs); // native GetNetworkStats(retstr[], retstr_size);
pawn::marh_t<int, const string, int> get_player_version_t("GetPlayerVersion", marhs); // native GetPlayerVersion(playerid, const version[], len); // Returns the SA-MP client revision as reported by the player
pawn::marh_t<text, int> text_draw_set_selectable_t("TextDrawSetSelectable", marhs); // native TextDrawSetSelectable(Text:text, set);
pawn::marh_t<int, float, float, float> get_vehicle_distance_from_point_t("GetVehicleDistanceFromPoint", marhs); // native Float:GetVehicleDistanceFromPoint(vehicleid, Float:X, Float:Y, Float:Z);
pawn::marh_t<> manual_vehicle_engine_and_lights_t("ManualVehicleEngineAndLights", marhs); // native ManualVehicleEngineAndLights();
pawn::marh_t<int, int, int, int, int, int, int, int> set_vehicle_params_ex_t("SetVehicleParamsEx", marhs); // native SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
pawn::marh_t<int, int&, int&, int&, int&, int&, int&, int&> get_vehicle_params_ex_t("GetVehicleParamsEx", marhs); // native GetVehicleParamsEx(vehicleid, &engine, &lights, &alarm, &doors, &bonnet, &boot, &objective);
pawn::marh_t<int, int, float&, float&, float&> get_vehicle_model_info_t("GetVehicleModelInfo", marhs); // native GetVehicleModelInfo(vehiclemodel, infotype, &Float:X, &Float:Y, &Float:Z);
pawn::marh_t<int> get_vehicle_virtual_world_t("GetVehicleVirtualWorld", marhs); // native GetVehicleVirtualWorld(vehicleid);
