int attach_object_to_vehicle (int objectid, int vehicleid, float OffsetX, float OffsetY, float OffsetZ, float RotX, float RotY, float RotZ); // native AttachObjectToVehicle(objectid, vehicleid, Float:OffsetX, Float:OffsetY, Float:OffsetZ, Float:RotX, Float:RotY, Float:RotZ);
int attach_object_to_object (int objectid, int attachtoid, float OffsetX, float OffsetY, float OffsetZ, float RotX, float RotY, float RotZ, int SyncRotation); // native AttachObjectToObject(objectid, attachtoid, Float:OffsetX, Float:OffsetY, Float:OffsetZ, Float:RotX, Float:RotY, Float:RotZ, SyncRotation = 1);
int attach_object_to_player (int objectid, int playerid, float OffsetX, float OffsetY, float OffsetZ, float RotX, float RotY, float RotZ); // native AttachObjectToPlayer(objectid, playerid, Float:OffsetX, Float:OffsetY, Float:OffsetZ, Float:RotX, Float:RotY, Float:RotZ);
int move_object (int objectid, float X, float Y, float Z, float Speed, float RotX, float RotY, float RotZ); // native MoveObject(objectid, Float:X, Float:Y, Float:Z, Float:Speed, Float:RotX = -1000.0, Float:RotY = -1000.0, Float:RotZ = -1000.0);
int is_object_moving (int objectid); // native IsObjectMoving(objectid);
int edit_object (int playerid, int objectid); // native EditObject(playerid, objectid);
int edit_player_object (int playerid, int objectid); // native EditPlayerObject(playerid, objectid);
int select_object (int playerid); // native SelectObject(playerid);
int cancel_edit (int playerid); // native CancelEdit(playerid);
int attach_player_object_to_vehicle (int playerid, int objectid, int vehicleid, float fOffsetX, float fOffsetY, float fOffsetZ, float fRotX, float fRotY, float RotZ); // native AttachPlayerObjectToVehicle(playerid, objectid, vehicleid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:RotZ);
int move_player_object (int playerid, int objectid, float X, float Y, float Z, float Speed, float RotX, float RotY, float RotZ); // native MovePlayerObject(playerid, objectid, Float:X, Float:Y, Float:Z, Float:Speed, Float:RotX = -1000.0, Float:RotY = -1000.0, Float:RotZ = -1000.0);
int is_player_object_moving (int playerid, int objectid); // native IsPlayerObjectMoving(playerid, objectid);
int set_object_material (int objectid, int materialindex, int modelid, string txdname, string texturename, int materialcolor=0); // native SetObjectMaterial(objectid, materialindex, modelid, txdname[], texturename[], materialcolor=0);
int set_player_object_material (int playerid, int objectid, int materialindex, int modelid, string txdname, string texturename, int materialcolor=0); // native SetPlayerObjectMaterial(playerid, objectid, materialindex, modelid, txdname[], texturename[], materialcolor=0);
int set_object_material_text (int objectid, string text, int materialindex, int materialsize, string fontface, int fontsize, int bold, int fontcolor, int backcolor, int textalignment); // native SetObjectMaterialText(objectid, text[], materialindex = 0, materialsize = OBJECT_MATERIAL_SIZE_256x128, fontface[] = "Arial", fontsize = 24, bold = 1, fontcolor = 0xFFFFFFFF, backcolor = 0, textalignment = 0);
int set_player_object_material_text (int playerid, int objectid, string text, int materialindex, int materialsize, string fontface, int fontsize, int bold, int fontcolor, int backcolor, int textalignment); // native SetPlayerObjectMaterialText(playerid, objectid, text[], materialindex = 0, materialsize = OBJECT_MATERIAL_SIZE_256x128, fontface[] = "Arial", fontsize = 24, bold = 1, fontcolor = 0xFFFFFFFF, backcolor = 0, textalignment = 0);/*  SA-MP Player Functions
float get_player_distance_from_point (int playerid, float X, float Y, float Z); // native Float:GetPlayerDistanceFromPoint(playerid, Float:X, Float:Y, Float:Z);
int get_player_target_player (int playerid); // native GetPlayerTargetPlayer(playerid);
int play_audio_stream_for_player (int playerid, string url, float posX, float posY, float posZ, float distance, int usepos); // native PlayAudioStreamForPlayer(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0);
int stop_audio_stream_for_player (int playerid); // native StopAudioStreamForPlayer(playerid);
int get_player_surfing_object_i_d (int playerid); // native GetPlayerSurfingObjectID(playerid);
int remove_building_for_player (int playerid, int modelid, float fX, float fY, float fZ, float fRadius); // native RemoveBuildingForPlayer(playerid, modelid, Float:fX, Float:fY, Float:fZ, Float:fRadius);
int set_player_attached_object (int playerid, int index, int modelid, int bone, float fOffsetX, float fOffsetY, float fOffsetZ, float fRotX, float fRotY, float fRotZ, float fScaleX, float fScaleY, float fScaleZ, int materialcolor1, int materialcolor2); // native SetPlayerAttachedObject(playerid, index, modelid, bone, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 1.0, Float:fScaleY = 1.0, Float:fScaleZ = 1.0, materialcolor1 = 0, materialcolor2 = 0);
int remove_player_attached_object (int playerid, int index); // native RemovePlayerAttachedObject(playerid, index);
int is_player_attached_object_slot_used (int playerid, int index); // native IsPlayerAttachedObjectSlotUsed(playerid, index);
int edit_attached_object (int playerid, int index); // native EditAttachedObject(playerid, index);
playertext create_player_text_draw (int playerid, float x, float y, string text); // native PlayerText:CreatePlayerTextDraw(playerid, Float:x, Float:y, text[]);
int player_text_draw_destroy (int playerid, playertext text); // native PlayerTextDrawDestroy(playerid, PlayerText:text);
int player_text_draw_letter_size (int playerid, playertext text, float x, float y); // native PlayerTextDrawLetterSize(playerid, PlayerText:text, Float:x, Float:y);
int player_text_draw_text_size (int playerid, playertext text, float x, float y); // native PlayerTextDrawTextSize(playerid, PlayerText:text, Float:x, Float:y);
int player_text_draw_alignment (int playerid, playertext text, int alignment); // native PlayerTextDrawAlignment(playerid, PlayerText:text, alignment);
int player_text_draw_color (int playerid, playertext text, int color); // native PlayerTextDrawColor(playerid, PlayerText:text, color);
int player_text_draw_use_box (int playerid, playertext text, int use); // native PlayerTextDrawUseBox(playerid, PlayerText:text, use);
int player_text_draw_box_color (int playerid, playertext text, int color); // native PlayerTextDrawBoxColor(playerid, PlayerText:text, color);
int player_text_draw_set_shadow (int playerid, playertext text, int size); // native PlayerTextDrawSetShadow(playerid, PlayerText:text, size);
int player_text_draw_set_outline (int playerid, playertext text, int size); // native PlayerTextDrawSetOutline(playerid, PlayerText:text, size);
int player_text_draw_background_color (int playerid, playertext text, int color); // native PlayerTextDrawBackgroundColor(playerid, PlayerText:text, color);
int player_text_draw_font (int playerid, playertext text, int font); // native PlayerTextDrawFont(playerid, PlayerText:text, font);
int player_text_draw_set_proportional (int playerid, playertext text, int set); // native PlayerTextDrawSetProportional(playerid, PlayerText:text, set);
int player_text_draw_set_selectable (int playerid, playertext text, int set); // native PlayerTextDrawSetSelectable(playerid, PlayerText:text, set);
int player_text_draw_show (int playerid, playertext text); // native PlayerTextDrawShow(playerid, PlayerText:text);
int player_text_draw_hide (int playerid, playertext text); // native PlayerTextDrawHide(playerid, PlayerText:text);
int player_text_draw_set_string (int playerid, playertext text, string string); // native PlayerTextDrawSetString(playerid, PlayerText:text, string[]);
int set_player_map_icon (int playerid, int iconid, float x, float y, float z, int markertype, int color, int style); // native SetPlayerMapIcon(playerid, iconid, Float:x, Float:y, Float:z, markertype, color, style = MAPICON_LOCAL);
int set_player_camera_look_at (int playerid, float x, float y, float z, int cut); // native SetPlayerCameraLookAt(playerid, Float:x, Float:y, Float:z, cut = CAMERA_CUT);
int get_player_camera_mode (int playerid); // native GetPlayerCameraMode(playerid);
int attach_camera_to_object (int playerid, int objectid); // native AttachCameraToObject(playerid, objectid);
int attach_camera_to_player_object (int playerid, int playerobjectid); // native AttachCameraToPlayerObject(playerid, playerobjectid);
int interpolate_camera_pos (int playerid, float FromX, float FromY, float FromZ, float ToX, float ToY, float ToZ, int time, int cut); // native InterpolateCameraPos(playerid, Float:FromX, Float:FromY, Float:FromZ, Float:ToX, Float:ToY, Float:ToZ, time, cut = CAMERA_CUT);
int interpolate_camera_look_at (int playerid, float FromX, float FromY, float FromZ, float ToX, float ToY, float ToZ, int time, int cut); // native InterpolateCameraLookAt(playerid, Float:FromX, Float:FromY, Float:FromZ, Float:ToX, Float:ToY, Float:ToZ, time, cut = CAMERA_CUT);
int stop_recording_player_data (int playerid); // native StopRecordingPlayerData(playerid);
int select_text_draw (int playerid, int hovercolor); // native SelectTextDraw(playerid, hovercolor); // enables the mouse so the player can select a textdraw
int cancel_select_text_draw (int playerid); // native CancelSelectTextDraw(playerid);	// cancel textdraw selection with the mouse /*  SA-MP Native SQLite Database Functions
int get_player_network_stats (int playerid, string retstr, int retstr_size); // native GetPlayerNetworkStats(playerid, retstr[], retstr_size);
int get_network_stats (string retstr, int retstr_size); // native GetNetworkStats(retstr[], retstr_size);
int get_player_version (int playerid, const string version, int len); // native GetPlayerVersion(playerid, const version[], len); // Returns the SA-MP client revision as reported by the player
int text_draw_set_selectable (text text, int set); // native TextDrawSetSelectable(Text:text, set);
float get_vehicle_distance_from_point (int vehicleid, float X, float Y, float Z); // native Float:GetVehicleDistanceFromPoint(vehicleid, Float:X, Float:Y, Float:Z);
int manual_vehicle_engine_and_lights (); // native ManualVehicleEngineAndLights();
int set_vehicle_params_ex (int vehicleid, int engine, int lights, int alarm, int doors, int bonnet, int boot, int objective); // native SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
int get_vehicle_params_ex (int vehicleid, int& engine, int& lights, int& alarm, int& doors, int& bonnet, int& boot, int& objective); // native GetVehicleParamsEx(vehicleid, &engine, &lights, &alarm, &doors, &bonnet, &boot, &objective);
int get_vehicle_model_info (int vehiclemodel, int infotype, float& X, float& Y, float& Z); // native GetVehicleModelInfo(vehiclemodel, infotype, &Float:X, &Float:Y, &Float:Z);
int get_vehicle_virtual_world (int vehicleid); // native GetVehicleVirtualWorld(vehicleid);
